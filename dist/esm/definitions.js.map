{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAsBA,MAAM,CAAN,IAAY,eAGX;AAHD,WAAY,eAAe;IACzB,kCAAe,CAAA;IACf,kCAAe,CAAA;AACjB,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;AACD,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,oCAAqB,CAAA;IACrB,wCAAyB,CAAA;IACzB,8BAAe,CAAA;IACf,2BAAY,CAAA;AACd,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB","sourcesContent":["import type { PluginListenerHandle } from \"@capacitor/core\";\r\n\r\nexport interface UrlEvent {\r\n  /**\r\n   * Emit when the url changes\r\n   *\r\n   * @since 0.0.1\r\n   */\r\n  url: string;\r\n}\r\nexport interface BtnEvent {\r\n  /**\r\n   * Emit when a button is clicked.\r\n   *\r\n   * @since 0.0.1\r\n   */\r\n  url: string;\r\n}\r\n\r\nexport type UrlChangeListener = (state: UrlEvent) => void;\r\nexport type ConfirmBtnListener = (state: BtnEvent) => void;\r\n\r\nexport enum BackgroundColor {\r\n  WHITE = \"white\",\r\n  BLACK = \"black\",\r\n}\r\nexport enum ToolBarType {\r\n  ACTIVITY = \"activity\",\r\n  NAVIGATION = \"navigation\",\r\n  BLANK = \"blank\",\r\n  DEFAULT = \"\",\r\n}\r\n\r\nexport interface Headers {\r\n  [key: string]: string;\r\n}\r\n\r\nexport interface GetCookieOptions {\r\n  url: string;\r\n  includeHttpOnly?: boolean;\r\n}\r\n\r\nexport interface OpenOptions {\r\n  /**\r\n   * Target URL to load.\r\n   * @since 0.1.0\r\n   */\r\n  url: string;\r\n  /**\r\n   * Headers to send with the request.\r\n   * @since 0.1.0\r\n   */\r\n  headers?: Headers;\r\n  /**\r\n   * if true, the browser will be presented after the page is loaded, if false, the browser will be presented immediately.\r\n   * @since 0.1.0\r\n   */\r\n  isPresentAfterPageLoad?: boolean;\r\n  preventDeeplink?: boolean;\r\n}\r\n\r\nexport interface DisclaimerOptions {\r\n  title: string;\r\n  message: string;\r\n  confirmBtn: string;\r\n  cancelBtn: string;\r\n}\r\n\r\nexport interface OpenWebViewOptions {\r\n  /**\r\n   * Target URL to load.\r\n   * @since 0.1.0\r\n   */\r\n  url: string;\r\n  /**\r\n   * Headers to send with the request.\r\n   * @since 0.1.0\r\n   */\r\n  headers?: Headers;\r\n  /**\r\n   * share options\r\n   * @since 0.1.0\r\n   */\r\n  shareDisclaimer?: DisclaimerOptions;\r\n  /**\r\n   * Toolbar type\r\n   * @since 0.1.0\r\n   * @default ToolBarType.DEFAULT\r\n   */\r\n  toolbarType?: ToolBarType;\r\n  /**\r\n   * Share subject\r\n   * @since 0.1.0\r\n   */\r\n  shareSubject?: string;\r\n  /**\r\n   * Title of the browser\r\n   * @since 0.1.0\r\n   * @default 'New Window'\r\n   */\r\n  title: string;\r\n  /**\r\n   * Background color of the browser, only on IOS\r\n   * @since 0.1.0\r\n   * @default BackgroundColor.BLACK\r\n   */\r\n  backgroundColor?: BackgroundColor;\r\n  /**\r\n   * Open url in a new window fullscreen\r\n   *\r\n   * isPresentAfterPageLoad: if true, the browser will be presented after the page is loaded, if false, the browser will be presented immediately.\r\n   * @since 0.1.0\r\n   * @default false\r\n   */\r\n  isPresentAfterPageLoad?: boolean;\r\n  /**\r\n   * Shows a reload button that reloads the web page\r\n   * @since 1.0.15\r\n   * @default false\r\n   */\r\n  showReloadButton?: boolean;\r\n  /**\r\n   * CloseModal: if true a confirm will be displayed when user clicks on close button, if false the browser will be closed immediately.\r\n   *\r\n   * @since 1.1.0\r\n   * @default false\r\n   */\r\n  closeModal?: boolean;\r\n  /**\r\n   * CloseModalTitle: title of the confirm when user clicks on close button, only on IOS\r\n   *\r\n   * @since 1.1.0\r\n   * @default 'Close'\r\n   */\r\n  closeModalTitle?: string;\r\n  /**\r\n   * CloseModalDescription: description of the confirm when user clicks on close button, only on IOS\r\n   *\r\n   * @since 1.1.0\r\n   * @default 'Are you sure you want to close this window?'\r\n   */\r\n  closeModalDescription?: string;\r\n  /**\r\n   * CloseModalOk: text of the confirm button when user clicks on close button, only on IOS\r\n   *\r\n   * @since 1.1.0\r\n   * @default 'Close'\r\n   */\r\n  closeModalOk?: string;\r\n  /**\r\n   * CloseModalCancel: text of the cancel button when user clicks on close button, only on IOS\r\n   *\r\n   * @since 1.1.0\r\n   * @default 'Cancel'\r\n   */\r\n  closeModalCancel?: string;\r\n  /**\r\n   * visibleTitle: if true the website title would be shown else shown empty\r\n   *\r\n   * @since 1.2.5\r\n   * @default true\r\n   */\r\n  visibleTitle?: boolean;\r\n  /**\r\n   * toolbarColor: color of the toolbar in hex format\r\n   *\r\n   * @since 1.2.5\r\n   * @default '#ffffff''\r\n   */\r\n  toolbarColor?: string;\r\n  /**\r\n   * showArrow: if true an arrow would be shown instead of cross for closing the window\r\n   *\r\n   * @since 1.2.5\r\n   * @default false\r\n   */\r\n  showArrow?: boolean;\r\n}\r\n\r\nexport interface InAppBrowserPlugin {\r\n  /**\r\n   * Open url in a new window fullscreen\r\n   *\r\n   * @since 0.1.0\r\n   */\r\n  open(options: OpenOptions): Promise<any>;\r\n\r\n  /**\r\n   * Clear all cookies\r\n   *\r\n   * @since 0.5.0\r\n   */\r\n  clearCookies(): Promise<any>;\r\n\r\n  /**\r\n   * Get cookies for a specific URL.\r\n   * @param options The options, including the URL to get cookies for.\r\n   * @returns A promise that resolves with the cookies.\r\n   */\r\n  getCookies(options: GetCookieOptions): Promise<{ cookies: Record<string, string> }>;\r\n\r\n  close(): Promise<any>;\r\n  /**\r\n   * Open url in a new webview with toolbars\r\n   *\r\n   * @since 0.1.0\r\n   */\r\n  openWebView(options: OpenWebViewOptions): Promise<any>;\r\n  setUrl(options: { url: string }): Promise<any>;\r\n  /**\r\n   * Listen for url change, only for openWebView\r\n   *\r\n   * @since 0.0.1\r\n   */\r\n  addListener(\r\n    eventName: \"urlChangeEvent\",\r\n    listenerFunc: UrlChangeListener\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n\r\n  /**\r\n   * Listen for close click only for openWebView\r\n   *\r\n   * @since 0.4.0\r\n   */\r\n  addListener(\r\n    eventName: \"closeEvent\",\r\n    listenerFunc: UrlChangeListener\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n  /**\r\n   * Will be triggered when user clicks on confirm button when disclaimer is required, works only on iOS\r\n   *\r\n   * @since 0.0.1\r\n   */\r\n  addListener(\r\n    eventName: \"confirmBtnClicked\",\r\n    listenerFunc: ConfirmBtnListener\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n\r\n  /**\r\n   * Remove all listeners for this plugin.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  removeAllListeners(): Promise<void>;\r\n\r\n  /**\r\n   * Reload the current web page.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  reload(): Promise<any>; // Add this line\r\n}\r\n"]}